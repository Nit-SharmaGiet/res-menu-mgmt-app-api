image:  
  name: hashicorp/terraform:1.0.0

#But the default executable is set to terraform which wont execute the below script & terraform command as it is.
#Because of this limitation to build job in pipeline, it became incompatible with gitlab. 
#So add below to overwrite the default entrypoint and let the terraform be considered as a usual container.
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


#Create gitlab pipeline for all the environmental stages of the IaC
stages:
  - Test and Lint     #[only if (merging is to main/production branch) or (commit branch is main/production branch)] , also Validate, doesnt need terraform image
  - Build and Push    #only if commit branch is Main/production, doesnt need terraform image
  - Staging Plan      #only if commit branch is Main/production
  - Staging Apply     #only if commit branch is Main/production
  - Production Plan   #only if commit branch is production
  - Production Apply  #manual, only if commit branch is production 
  - Destroy           #manual for both, staging is for either main/production , production is for only production 

Test and Lint: #under feature/cicd-lint passed to production
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  stage: Test and Lint
  script: #placeholder script been replaced with below.
    - apk add --update docker-compose
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"
  rules:
  #only if (merging is to main branch) or (commit branch is main branch)
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

Validate Terraform: #under feature/cicd-lint passed to production
  stage: Test and Lint
  script: #placeholder script been replaced with below.
    - cd deploy/
    - terraform init -backend=false  #bcoz no need to expose creds here itself, we can configure it in further stages.
    - terraform validate
    - terraform fmt -check  #do not format it when its in pipeline, just do check and if not correct, make the job fail.
  rules:
    #only if (merging is to main branch) or (commit branch is main branch)
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(main|production)$/ || $CI_COMMIT_BRANCH =~ /^(main|production)$/'

##################################################################################################

Build and Push: #under feature/cicd-buildandpush
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  stage: Build and Push
  script: #placeholder script been replaced with below.
    - apk add python3
    - pip3 install awscli
    #assign the COMMIT environment value of gitlab as a tag to repo, to make it unique. 
    - docker build --compress -t $ECR_REPO:$CI_COMMIT_SHORT_SHA .
    #get docker login command then execute the docker login command
    - $(aws ecr get-login --no-include-email --region us-east-1)
    #push image to ECR registry. this image will be stored in ECR in every push, so that one can track up/ down to any version they need.
    - docker push $ECR_REPO:$CI_COMMIT_SHORT_SHA
    #tag the current one as latest
    - docker tag $ECR_REPO:$CI_COMMIT_SHORT_SHA $ECR_REPO:latest
    #then push the latest also to ECR registry. the latest version is the ECR will be overwritten once a new push happens.
    - docker push $ECR_REPO:latest
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
##################################################################################################

Staging Plan:
  stage: Staging Plan
  script: #placeholder script been replaced with below.
    - cd deploy/
    #assign the image:tag to a env variable TF_VAR_<>
    - TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select staging || terraform workspace new staging
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
##################################################################################################

Staging Apply:
  stage: Staging Apply
  script: #placeholder script been replaced with below.
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select staging
    #no more planning...haha
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
##################################################################################################

Production Plan:
  stage: Production Plan
  script: #placeholder script been replaced with below.
    - cd deploy/
    #assign the image:tag to a env variable TF_VAR_<>
    - TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    #either select, if not exists create new
    - terraform workspace select production || terraform workspace new production
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
##################################################################################################

Production Apply:
  stage: Production Apply
  script: 
    - cd deploy/
    - export TF_VAR_ecr_image_api=$ECR_REPO:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production
    #no more planning...haha
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
##################################################################################################

Staging Destroy:
  stage: destroy
  script: #placeholder script been replaced with below.
    - cd deploy/
    - terraform init
    - terraform workspace select staging
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(main|production)$/'
      when: manual

Production Destroy:
  stage: destroy
  script: #placeholder script been replaced with below.
    - cd deploy/
    - terraform init
    - terraform workspace select production
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual

#END